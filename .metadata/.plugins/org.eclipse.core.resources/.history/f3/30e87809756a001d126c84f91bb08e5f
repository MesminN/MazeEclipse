package fr.tp.maze.serialization;

import fr.tp.maze.exceptions.EmptyFileMazePersistenceException;
import fr.tp.maze.exceptions.ErroneousArrivalNumberMazeException;
import fr.tp.maze.exceptions.ErroneousDepartureNumberMazeException;
import fr.tp.maze.exceptions.UnknownCharacterFileMazePersistenceException;
import fr.tp.maze.serialization.FileMazePersistenceManager;
import fr.tp.maze.serialization.SerializationFileMazePersistenceManager;
import org.junit.*;

import java.io.File;
import java.io.InputStream;
import java.net.URL;
import java.nio.file.Path;
import java.nio.file.Paths;

class FileMazePersistenceManagerTest {
	
    FileMazePersistenceManager mazePersistenceManager;

    @BeforeEach
    void setUp() {
        mazePersistenceManager = new FileMazePersistenceManager();
    }

    @Test
    void doRead_wrongSymbols_throwErroneousDepartureNumberMazeException() {
        String path = getFilePathFromResourcesTestData("labyrintheErreurSymboles.maze");
        assertThrows(UnknownCharacterFileMazePersistenceException.class, () -> mazePersistenceManager.doRead(path));
    }

    @Test
    void doRead_EmptyFile_throwEmptyFileMazePersistenceException() {
        String path = getFilePathFromResourcesTestData("labyrintheFichierVide.maze");
        assertThrows(EmptyFileMazePersistenceException.class, () -> mazePersistenceManager.doRead(path));
    }

    @Test
    void doRead_multipleDepartures_throwErroneousDepartureNumberMazeException() {
        String path = getFilePathFromResourcesTestData("labyrintheDepartMultiples.maze");
        assertThrows(ErroneousDepartureNumberMazeException.class, () -> mazePersistenceManager.doRead(path));
    }

    @Test
    void doRead_multipleArrivals_throwErroneousArrivalNumberMazeException() {
        String path = getFilePathFromResourcesTestData("labyrintheMultiplesArrivees.maze");
        assertThrows(ErroneousArrivalNumberMazeException.class, () -> mazePersistenceManager.doRead(path));
    }

    private String getFilePathFromResourcesTestData(String name) {
        Path resourceDirectory = Paths.get("src","test","resources", "data", name);
        String absolutePath = resourceDirectory.toFile().getAbsolutePath();

        return absolutePath;
    }
}